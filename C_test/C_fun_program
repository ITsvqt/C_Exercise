#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define LINE_SEPARATOR "--- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ---"

#define NUMBER_BUFFER 10
#define BUFFER_SIZE   512


int lpad(); 
int wc();
int replace_last();
int reverse_words();


void UI_Menu();
void print_BaseMenu();

void get_MenuOptn (int *piMenOptn);
int  get_InputStr (char *strString, char *strFieldInf);
int  get_InputInt (int  *piNumber , char *strFieldInf);
int  get_InputChr (char *pcChar   , char *strFieldInf);

int  is_StringNumbers(char *strString);
void remove_LF       (char *strString);
void clear_STDIN ();
void clear_Screen();

void logError_NullArg(const char *strFuncName);


int main()
{
  system("clear");

  UI_Menu();


  return 0;
}



/*   ****************  */
/*     Functions   */
/*   ****************  */
/* ---                 */


/* Left pad string */
int lpad()
{
  char strSrc [BUFFER_SIZE] = {0};
  char strRes [BUFFER_SIZE] = {0};
    
  char cFill    = 0;
  int  iFillLen = 0;
  int  iSrcLen  = 0;
  int  iCnt     = 0;
  
  /* Check input data to ensure no memory faults,
     because we using string replacing */
  do
  {
    get_InputInt(&iFillLen, "Pad length");
    get_InputChr(&cFill   , "Fill char" );
    get_InputStr(strSrc   , "Source"    );
    
    iSrcLen = strlen(strSrc);
    
    if(iFillLen >= iSrcLen)
    {
      if( (iFillLen + iSrcLen) >= BUFFER_SIZE )
      {
       printf("Pad[%d]\nLen[%d]\nTot[%d] Max[%d]\n", iFillLen, iSrcLen, (iFillLen + iSrcLen), BUFFER_SIZE - 1);
       printf("Input data will cause \"Memory fault\"\n");
        
       clear_Screen();
        
       continue;
      }
    }
    
    break;
    
  }while(1);  
 
 
  if(iSrcLen > iFillLen)
  {
    strcpy(strRes, strSrc); 
  }
  else
  {
    while(iFillLen > iCnt)
    {
      strRes[strlen(strRes)] = cFill;
      
      ++iCnt;
    }
    
    strcpy( (strRes + strlen(strRes)) , strSrc);
  }
  
  printf("\t *Left pad\n\n");
  printf("SRC\t[%s]\n"  ,   strSrc );
  printf("CHR\t[%c]\n"  ,   cFill  );
  printf("LEN\t[%d]\n\n", iFillLen );
  printf("RES\t[%s]\n"  ,   strRes );
  
  return 0; //ERROR_NONE
}


/* Word count in string by separator */
int wc()
{
  char strSeparator[BUFFER_SIZE] = {0};
  char strSource   [BUFFER_SIZE] = {0};
  char strResult   [BUFFER_SIZE] = {0};  // Buffer for separate words
  char strInput    [BUFFER_SIZE] = {0};
    
  int iWordCounter = 0;
  int iSepLen      = 0;
  int iResLen      = 0; 
  
  char *strSepBegin = NULL;
  char *strWrdBegin = NULL;


  get_InputStr(strSeparator, "Separator");
  get_InputStr(strSource   , "Source"   );
  
  strcpy(strInput, strSource);
  
  iSepLen = strlen(strSeparator);

  /* string contains separator  */
  while (strSepBegin = strstr(strSource, strSeparator))
  {
    /* Separator not at beginning */
    if(strSepBegin != strSource)
    {
      strWrdBegin = strSource;
      
      /* Add word to result */
      while(strWrdBegin < strSepBegin)
      {
        strResult[iResLen++] = *strWrdBegin++;        
      }
      
      /* Add separator to result */
      strResult[iResLen++] = ',';
      strResult[iResLen++] = ' ';
      
      ++iWordCounter;
    }
    
    /* move after separator */
    strSepBegin += iSepLen;
    
    /* reasign base */
    strcpy(strSource, strSepBegin);
  }
  
  /* word after last separator */
  if(strSource[0])
  {
    strWrdBegin = strSource;
    
    while(*strWrdBegin)
    {
      strResult[iResLen++] = *strWrdBegin++; 
    }
    
    iWordCounter++;
  }
  /* Remove last word separator */
  else
  {
    strResult[--iResLen] = '\0';
    strResult[--iResLen] = '\0';   
  }
  
  printf("\t *Word count\n\n");
  printf("SRC\t[%s]\n"  , strInput     );
  printf("SEP\t[%s]\n\n", strSeparator );
  printf("Words\t[%s]\n",   strResult    );
  printf("Count\t[%d]\n"  , iWordCounter );
  return 0; // ERROR_NONE 
}

/* Replace last occurrence of string */
int replace_last()
{
  char strSrc  [BUFFER_SIZE] = {0};
  char strRes  [BUFFER_SIZE] = {0};
  char strFrom [BUFFER_SIZE] = {0};  /* Match   pattern */
  char strTo   [BUFFER_SIZE] = {0};  /* Replace pattern */
    
  int  iReplacements = 0;
  
  int  iFromLen = 0;
  int  iHeadLen = 0;  /* Length of part before replacement */
  int  iSrcLen  = 0;
  int  iOcrCnt  = 0;
  int  i        = 0;

  char *strSepBegin = NULL;
  
   do
  {
    get_InputStr(strSrc  , "Source"  );
    get_InputStr(strFrom , "Replace" );
    get_InputStr(strTo   , "To"      );
    
    iSrcLen  = strlen(strSrc);
    iFromLen = strlen(strFrom);
    
    
    if( (iSrcLen - iFromLen + strlen(strTo)) >= BUFFER_SIZE)
    {
      printf("str[%d] - fr[%d] + to[%d]\nTot[%d]\nMax[%d]\n "
          , iSrcLen, iFromLen, strlen(strTo)
          , (iSrcLen - iFromLen + strlen(strTo)) , BUFFER_SIZE - 1);
          
      printf("Input data will cause \"Memory fault\"\n");
      
      clear_Screen();
        
      continue;
    }
    
    break;
    
  }while(1);
  
  strSepBegin = strSrc;
  
  /* Count occurrence of pattern */
  while(strSepBegin = strstr(strSepBegin, strFrom))
  {
    strSepBegin += iFromLen;
    
    iOcrCnt++;
  }
  
  if(!iOcrCnt)
  {
    iReplacements = 0;
    
    strcpy(strRes, strSrc);
  }
  else
  {
    iReplacements = 1;
    
    /* pointer reseting */
    strSepBegin = strSrc;
 
    /* Set on last occurrence */
    while(i < iOcrCnt)
    {
      strSepBegin = strstr(strSepBegin, strFrom);
    
      if(i < iOcrCnt - 1)
      {
        strSepBegin += iFromLen;
      }
    
      ++i;
    }
  
    iHeadLen = strSepBegin - strSrc;
  
    /***   Head  ***/
    strncpy(strRes, strSrc, iHeadLen);
  
    strSepBegin += iFromLen;
  
    /* Replacement */
    strcpy(strRes + strlen(strRes), strTo);
  
    /***   Tail  ***/
    strcpy(strRes + strlen(strRes), strSepBegin);
   }
    
  
  printf("\t *Replace last\n\n");
  printf("SRC \t[%s]\n",   strSrc   );
  printf("FROM\t[%s]\n",   strFrom  );
  printf("TO  \t[%s]\n\n", strTo    );
  printf("RES \t[%s]\n",   strRes   );
  printf("DIF \t[%d]\n", iReplacements);
  
  return 0; // ERROR_NONE
}

/* Reverse order of words */
int reverse_words()
{
  char strSource [BUFFER_SIZE] = {0};
  char strResult [BUFFER_SIZE] = {0};
  
  int  iSrcLen  = 0;
  int  iResLen  = 0;
  int  iWordLen = 0;
  
  int  iIsWord  = 0;
  int  iIsSpace = 0;
  
  char *pcWordStart = NULL;  
  char *pcWordEnd   = NULL;    
  char *pcItr       = NULL;       /* Iterator End -> Start */
  
  
  get_InputStr(strSource, "Source");
  
  remove_LF(strSource);
  
  iSrcLen = strlen(strSource);
  
  /******** Set iterator *******/
  pcItr = strSource + iSrcLen - 1; 
  
  while(pcItr >= strSource)
  {
    iIsSpace = isspace(*pcItr);
    
    if(!iIsWord)
    {
      if(!iIsSpace)
      {
        iIsWord = 1;             /* UP Word flag */
        
        pcWordEnd = pcItr;
      }
    }
    else               
    {
      if(iIsSpace || pcItr == strSource)
      {
        pcWordStart = pcItr;
        
        if(iIsSpace)
        {
          pcWordStart++;   
        }
       
       iIsWord = 0;              /* DOWN Word flag */
       
       iWordLen = pcWordEnd - pcWordStart + 1;
       
       strncpy(strResult + iResLen, pcWordStart, iWordLen);
       
       iResLen += iWordLen;
       
       *(strResult+iResLen) = ' ';
       
       iResLen ++; 
      }
      
    }/* end if;else */
    
    pcItr--;
    
  }/* end while */
  
  printf("\t *Reverse words\n\n");
  printf("SRC\t[%s]\n", strSource);
  printf("RES\t[%s]\n", strResult);
  
  return 0; //ERROR_NONE
}



/*   ****************  */
/*    Menu functions   */
/*   ****************  */
/* ---                 */

/* Menu for User navigation */
void UI_Menu()
{
  /* Men optn var */
  int  iMenOptn = -1;


  while(iMenOptn != 0)
  {
    print_BaseMenu();
    
    get_MenuOptn(&iMenOptn);
    
    switch(iMenOptn)
    {
      case 0:
        /* 0 */  
        break;
        
      /* Left Pad func */  
      case 1:
        lpad();
        break;
      
      /* Word Count func by ' ' */
      case 2:
        wc();
        break;
        
      /* Replace Last func */  
      case 3:
        replace_last(); 
        break;
      
      /* Reverse words by ' ' */
      case 4:
        reverse_words();
        break;
        
      default:
        printf("CAREFULL !! Not a valid menu selection .\n");
        
        break;
    }
    clear_Screen();
  }
}  

void print_BaseMenu()
{
  printf("%s\n", LINE_SEPARATOR);
  printf("\t\t\t_C fun program  ' 1,97\t\t\t(ISO 2007 v.15)\n");
  printf("%s\n\n\n", LINE_SEPARATOR);
  printf("\t--------------------    (i)    -    -    -    -    -    -   (i)\n");
  printf("\t *        L_Pad [1] |\t__          Left pad word            __\n");
  printf("\t *   Word_Count [2] |\t__ Word count in string by separator __\n");
  printf("\t *     Rep_Last [3] |\t__      Replace last occurrence      __\n");
  printf("\t *    Rev_Words [4] |\t__ Reverse word order in a sentence  __\n");
  printf("\t                    |\n");
  printf("\t #R        Exit [0] |\n");
  printf("\t--------------------            -    -    -    -    -    -      \n\n");

}



/*   ****************  */
/* User Input functions */
/*   ****************  */
/* ---                 */

/* Get menu option from user */
void get_MenuOptn(int *piMenOptn)
{
  printf("\tMenu option:    [x]\n");
  scanf("%d", piMenOptn);
  
  clear_STDIN();
  system("clear");
}

/* Reads string via console input */
int get_InputStr(char *strString, char *strFieldInf)
{
  if(!strString || !strFieldInf)
  {
    logError_NullArg(__func__);

    return 1; //ERROR 
  }
  
  int iBuffLen = 0;
  
  
  do
  {
    system("clear");
    //clear_Screen();
    
    memset(strString, 0, BUFFER_SIZE);
    
    printf("\tEnter [string] for [%s](max %d charecters):\n\n", strFieldInf, BUFFER_SIZE - 2);
    
    fgets(strString, BUFFER_SIZE, stdin);
    
    remove_LF(strString);
    
    iBuffLen = strlen(strString);
    
    if(iBuffLen == 0)
    {
      ;
    }
    else if(iBuffLen + 1 >= BUFFER_SIZE)
    {
      clear_STDIN();
    }
    else
    {
      system("clear");
      //clear_Screen();
      return 0;  //ERROR_NONE
    }

  }while(1);

}

/* Read integer via console input
ret val: 0 = OK */
int get_InputInt(int *piNumber, char *strFieldInf)
{
  if(!piNumber || !strFieldInf)
  {
    logError_NullArg(__func__);

    return 1; //ERROR 
  }
  
  char strBuffer[NUMBER_BUFFER] = {0};
  int  iBuffLen  = 0;
  int  isBuffOvf = 0;
  int  isBuffEmp = 0;

  
  do
  {
    isBuffOvf = 0;
    isBuffEmp = 0;
    
    system("clear");
  
    memset(strBuffer, 0, NUMBER_BUFFER);

    printf("\tEnter [number] for [%s](max %d digits):\n\n", strFieldInf, NUMBER_BUFFER - 2);
    
    fgets(strBuffer, NUMBER_BUFFER, stdin);
  
    remove_LF(strBuffer);
  
    iBuffLen = strlen(strBuffer);
    
    if(iBuffLen == 0)
    {
      isBuffEmp = 1; 
    }
    else if(iBuffLen + 1 >= NUMBER_BUFFER)
    {
      clear_STDIN();
      
      isBuffOvf = 1;
    }
    
  }while(is_StringNumbers(strBuffer) || isBuffOvf || isBuffEmp);
 
  *piNumber = atoi(strBuffer);

  system("clear");

  return 0;       // ERROR_NONE
}

/* Read single char via console input 
   ret val: 0 = OK */
int get_InputChr(char * pcChar, char *strFieldInf)
{
  if(!pcChar || !strFieldInf)
  {
    logError_NullArg(__func__);

    return 1; //ERROR 
  }
        
  char strBuffer[BUFFER_SIZE] = {0};
  int  iBuffLen = 0;

  
  do
  {
    system("clear");
    
    memset(strBuffer, 0, BUFFER_SIZE);
    
    printf("\tEnter [single charecter] for [%s] :\n\n", strFieldInf);
  
    fgets(strBuffer, BUFFER_SIZE, stdin);
  
    remove_LF(strBuffer);
  
    iBuffLen = strlen(strBuffer);
    
    if(iBuffLen + 1 >= BUFFER_SIZE)
    {
      clear_STDIN();
    }
    
  }while(iBuffLen != 1);

  *pcChar = *strBuffer;
  
  system("clear");
  
  return 0;   // ERROR_NONE
}



/*   ****************  */
/*    Help functions   */
/*   ****************  */
/* ---                 */

/* String characters '0' - '9'
   ret val: 0 = YES */
int  is_StringNumbers(char *strString)
{
  int iCnt = 0;
  
  while(strString[iCnt])
  {
    if(!isdigit(strString[iCnt]))
    {
      return 1;   // FALSE
    }
    
    ++iCnt; 
  }
  
  return 0;       //TRUE
}

/* Clear console screen */
void clear_Screen()
{
  char strBuff[BUFFER_SIZE] = {0};
  int  iBuffLen = 0;

  
  printf("\n\nPress [Enter] to continue.\n");
  
  fgets(strBuff, BUFFER_SIZE, stdin);
  
  iBuffLen = strlen(strBuff);
  
  if(iBuffLen + 1 >= BUFFER_SIZE)
  {
    clear_STDIN();
  }
  
  system("clear");
}

/* Empty stdin */
void clear_STDIN()
{
  char c = 0;

 
  do
  {
    c = getchar();
    // printf("Cl ch: %d\n", c);
  }while(c != '\n' && c != EOF);
}

/* Removes possible LF character at end of string */
void remove_LF(char *strString)
{
  int iLen = strlen(strString) - 1;

  
  if( *(strString + iLen) == '\n')
  {
    *(strString + iLen) = '\0'; 
  }
}


/*   ****************  */
/* ERROR log functions */
/*   ****************  */
/* ---                 */

/* NULL argument passed to function*/
void logError_NullArg(const char *strFuncName)
{
  printf("ERROR: NULL reference arg in [%s]\n", __func__);
}
